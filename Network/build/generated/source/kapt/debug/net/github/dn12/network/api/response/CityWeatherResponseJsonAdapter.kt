// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package net.github.dn12.network.api.response

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.MutableList
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class CityWeatherResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<CityWeatherResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "name", "weather", "main",
      "wind", "sys")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "id")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val mutableListOfWeatherAdapter: JsonAdapter<MutableList<Weather>> =
      moshi.adapter(Types.newParameterizedType(MutableList::class.java, Weather::class.java),
      emptySet(), "weather")

  private val mainAdapter: JsonAdapter<Main> = moshi.adapter(Main::class.java, emptySet(), "main")

  private val windAdapter: JsonAdapter<Wind> = moshi.adapter(Wind::class.java, emptySet(), "wind")

  private val sysAdapter: JsonAdapter<Sys> = moshi.adapter(Sys::class.java, emptySet(), "sys")

  @Volatile
  private var constructorRef: Constructor<CityWeatherResponse>? = null

  public override fun toString(): String = buildString(41) {
      append("GeneratedJsonAdapter(").append("CityWeatherResponse").append(')') }

  public override fun fromJson(reader: JsonReader): CityWeatherResponse {
    var id: Int? = 0
    var name: String? = null
    var weather: MutableList<Weather>? = null
    var main: Main? = null
    var wind: Wind? = null
    var sys: Sys? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          id = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          weather = mutableListOfWeatherAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("weather", "weather", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          main = mainAdapter.fromJson(reader) ?: throw Util.unexpectedNull("main", "main", reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          wind = windAdapter.fromJson(reader) ?: throw Util.unexpectedNull("wind", "wind", reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          sys = sysAdapter.fromJson(reader) ?: throw Util.unexpectedNull("sys", "sys", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xffffffc0.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  CityWeatherResponse(
          id = id as Int,
          name = name as String,
          weather = weather as MutableList<Weather>,
          main = main as Main,
          wind = wind as Wind,
          sys = sys as Sys
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<CityWeatherResponse> = this.constructorRef ?:
          CityWeatherResponse::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
          String::class.java, MutableList::class.java, Main::class.java, Wind::class.java,
          Sys::class.java, Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          id,
          name,
          weather,
          main,
          wind,
          sys,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: CityWeatherResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    intAdapter.toJson(writer, value_.id)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("weather")
    mutableListOfWeatherAdapter.toJson(writer, value_.weather)
    writer.name("main")
    mainAdapter.toJson(writer, value_.main)
    writer.name("wind")
    windAdapter.toJson(writer, value_.wind)
    writer.name("sys")
    sysAdapter.toJson(writer, value_.sys)
    writer.endObject()
  }
}
